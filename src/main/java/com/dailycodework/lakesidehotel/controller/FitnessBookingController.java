package com.dailycodework.lakesidehotel.controller;

import com.dailycodework.lakesidehotel.model.FitnessBooking;
import com.dailycodework.lakesidehotel.service.IFitnessBookingService; 
import lombok.RequiredArgsConstructor;
import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.security.access.prepost.PreAuthorize; 
import com.dailycodework.lakesidehotel.exception.ResourceNotFoundException; 

import java.time.LocalDate;
import java.util.List;

/**
 * Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ü‡∏¥‡∏ï‡πÄ‡∏ô‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢ Admin
 */
@RestController
@RequiredArgsConstructor
@RequestMapping("/api/fitness") 
@CrossOrigin(origins = "http://localhost:5173") 
public class FitnessBookingController {

    private final IFitnessBookingService fitnessBookingService; 

    // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    // URL: GET /api/fitness/bookings/byDate?date=YYYY-MM-DD
    @GetMapping("/bookings/byDate")
    public ResponseEntity<List<String>> getBookedSlots(
        @RequestParam("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date) {
        
        List<String> bookedTimes = fitnessBookingService.findBookedStartTimes(date);
        
        return ResponseEntity.ok(bookedTimes); 
    }

    // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
    @PostMapping("/bookings")
    public ResponseEntity<?> createBooking(@RequestBody FitnessBooking booking) {
        try {
            FitnessBooking newBooking = fitnessBookingService.createBooking(booking);
            return new ResponseEntity<>(newBooking, HttpStatus.CREATED);
        } catch (IllegalStateException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(e.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Booking failed: " + e.getMessage());
        }
    }
    
    // API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Admin: ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
    // URL: GET /api/fitness/admin/all-bookings
    @GetMapping("/admin/all-bookings")
    //@PreAuthorize("hasRole('ROLE_ADMIN')") 
    public ResponseEntity<List<FitnessBooking>> getAllFitnessBookings() {
        List<FitnessBooking> bookings = fitnessBookingService.getAllBookings(); 
        return ResponseEntity.ok(bookings); 
    }
    
    // üåüüåü API ‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Path ‡πÄ‡∏õ‡πá‡∏ô /delete/booking/{bookingId} üåüüåü
    // URL ‡πÉ‡∏´‡∏°‡πà: DELETE /api/fitness/delete/booking/{bookingId}
    @DeleteMapping("/delete/booking/{bookingId}") 
    //@PreAuthorize("hasRole('ROLE_ADMIN')") // ‡∏Ñ‡∏á‡∏Ñ‡∏≠‡∏°‡πÄ‡∏°‡∏ô‡∏ï‡πå‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ 401
    public ResponseEntity<String> deleteBooking(@PathVariable Long bookingId) {
        try {
            fitnessBookingService.cancelBooking(bookingId); 
            // 200 OK ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
            return ResponseEntity.ok("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á ID " + bookingId + " ‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß");
        } catch (ResourceNotFoundException e) {
             // 404 Not Found 
             return ResponseEntity.status(HttpStatus.NOT_FOUND).body(e.getMessage()); 
        } catch (Exception e) {
            // 500 Internal Server Error
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á: " + e.getMessage());
        }
    }
}